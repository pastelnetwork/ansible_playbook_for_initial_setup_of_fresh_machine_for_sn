---
- hosts: all
  become: true
  vars:
    created_username: ubuntu
    ansible_ssh_wait_timeout: 300
    home_dir: "/home/{{ created_username }}"
    zshrc_path: "{{ home_dir }}/.zshrc"
    oh_my_zsh_install_flag: "{{ home_dir }}/.oh-my-zsh"

  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required packages using aptitude
      apt:
        name:
          - antiword
          - automake
          - bat
          - build-essential
          - certbot
          - clang
          - cmake
          - cppcheck
          - curl
          - direnv
          - docker-compose
          - docker.io
          - doxygen
          - fail2ban
          - ffmpeg
          - flac
          - fonts-powerline
          - fzf
          - gcc
          - g++
          - gdb
          - gdisk
          - gh
          - git
          - golang-go
          - google-chrome-stable
          - graphviz
          - htop
          - jq
          - kcachegrind
          - lame
          - libboost-all-dev
          - libbz2-dev
          - libeigen3-dev
          - libffi-dev
          - libglew-dev
          - libglm-dev
          - libglfw3
          - libglfw3-dev
          - libjpeg-dev
          - liblzma-dev
          - libmad0
          - libmagic1
          - libncurses5-dev
          - libncursesw5-dev
          - libpq-dev
          - libreadline-dev
          - libsox-fmt-mp3
          - libsqlite3-dev
          - libssl-dev
          - libstdc++-11-dev
          - libtbb-dev
          - libvulkan-dev
          - libxml2-dev
          - libxmlsec1-dev
          - llvm
          - logcheck
          - logrotate
          - logwatch
          - lldb
          - make
          - mercurial
          - multitail
          - nano
          - nasm
          - ncdu
          - net-tools
          - nginx
          - ninja-build
          - nmap
          - nodejs
          - npm
          - openssh-client
          - openssh-server
          - openssl
          - p7zip-full
          - pipx
          - pkg-config
          - poppler-utils
          - postgresql
          - python3-certbot-nginx
          - python3-openssl
          - redis
          - redis-server
          - redis-tools
          - ripgrep
          - rsync
          - software-properties-common
          - sox
          - spirv-tools
          - sqlite3
          - subversion
          - swig
          - tesseract-ocr
          - tldr
          - tk-dev
          - tmux
          - traceroute
          - tree
          - ubuntu-release-upgrader-core
          - ubuntu-restricted-extras
          - ufw
          - unzip
          - valgrind
          - vcsh
          - vim
          - vpnc
          - vulkan-tools
          - vulkan-validationlayers-dev
          - wget
          - xz-utils
          - yasm
          - zlib1g-dev
          - zsh
          - zstd
        state: latest
        update_cache: true
        autoremove: yes
      ignore_errors: yes

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
      ignore_errors: yes
      
    - name: Setup passwordless sudo for the created user
      lineinfile:
        path: "/etc/sudoers.d/{{ created_username }}"
        state: present
        line: "{{ created_username }} ALL=(ALL) NOPASSWD: ALL"
        create: true
        validate: '/usr/sbin/visudo -cf %s'
      ignore_errors: yes

    - name: Set authorized key for the created user
      ansible.posix.authorized_key:
        user: "{{ created_username }}"
        state: present
        key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_ed25519.pub') }}"
      ignore_errors: yes

    - name: Add Google official GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      ignore_errors: yes

    - name: Add Google Chrome signing key
      apt_key:
        url: https://dl.google.com/linux/linux_signing_key.pub
        state: present
      ignore_errors: yes

    - name: Add Github signing key and apt repository
      shell: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      ignore_errors: yes

    - name: Add the Google Chrome repository
      apt_repository:
        repo: deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
        state: present
      ignore_errors: yes

    - name: Check if pipx path is already in PATH
      shell: "pipx ensurepath"
      become: no
      register: pipx_path_check
      changed_when: "'All pipx binary directories have been added to PATH' not in pipx_path_check.stdout"
      ignore_errors: yes

    - name: Run pipx ensurepath with --force if required
      shell: "pipx ensurepath --force"
      become: no
      when: "'All pipx binary directories have been added to PATH' in pipx_path_check.stdout"
      ignore_errors: yes

    - name: Switch to ubuntu user for remaining tasks
      become_user: "{{ created_username }}"
      block:
        - name: Install oh-my-zsh
          git:
            repo: https://github.com/robbyrussell/oh-my-zsh
            dest: "{{ oh_my_zsh_install_flag }}"
            force: yes
          ignore_errors: yes

        - name: Ensure zsh is installed
          apt:
            name: zsh
            state: present
            update_cache: yes
          ignore_errors: yes

        - name: Ensure the user has a zsh shell
          user:
            name: "{{ created_username }}"
            shell: /bin/zsh
            state: present
          ignore_errors: yes

        - name: Create .local/bin directory
          file:
            path: "{{ home_dir }}/.local/bin"
            state: directory
          ignore_errors: yes

        - name: Install custom tmux configuration
          git:
            repo: https://github.com/gpakosz/.tmux.git
            dest: "{{ home_dir }}/.tmux"
            force: yes
          ignore_errors: yes

        - name: Set up custom tmux configuration
          shell: |
            cd {{ home_dir }}
            ln -s -f .tmux/.tmux.conf
            cp .tmux/.tmux.conf.local .
          ignore_errors: yes

        - name: Further tmux customizations
          blockinfile:
            path: "{{ home_dir }}/.tmux.conf.local"
            insertafter: "# EOF"
            block: |
              set-option -g default-shell $SHELL
              set -g mouse on
              set-option -g history-limit 25000
              set -g @plugin 'tmux-plugins/tmux-resurrect'
          ignore_errors: yes

        - name: Install powerlevel10k zsh theme
          git:
            repo: https://github.com/romkatv/powerlevel10k.git
            dest: "{{ home_dir }}/powerlevel10k"
            depth: 1
          ignore_errors: yes

        - name: Install zsh-autosuggestions plugin
          git:
            repo: https://github.com/zsh-users/zsh-autosuggestions
            dest: "{{ home_dir }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
            depth: 1
          ignore_errors: yes

        - name: Install Atuin
          shell: /bin/bash -c "$(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)"
          ignore_errors: yes

        - name: Ensure Atuin environment is loaded
          lineinfile:
            path: "{{ zshrc_path }}"
            regexp: 'eval "$(atuin init zsh)"'
            line: 'eval "$(atuin init zsh)"'
            state: present
          ignore_errors: yes

        - name: Install tmux plugin manager
          git:
            repo: https://github.com/tmux-plugins/t

pm.git
            dest: "{{ home_dir }}/.tmux/plugins/tpm"
          ignore_errors: yes

        - name: Install Rust
          shell: curl https://sh.rustup.rs -sSf | sh -s -- -y
          register: install_rust_output
          ignore_errors: yes

        - name: Ensure Rust environment is loaded
          lineinfile:
            path: "{{ zshrc_path }}"
            regexp: 'source $HOME/.cargo/env'
            line: 'source $HOME/.cargo/env'
            state: present
          ignore_errors: yes

        - name: Download zshrc file
          get_url:
            url: https://raw.githubusercontent.com/pastelnetwork/ansible_playbook_for_initial_setup_of_fresh_machine_for_sn/master/zshrc
            dest: "{{ zshrc_path }}"
            owner: "{{ created_username }}"
            group: "{{ created_username }}"
            mode: '0644'
            backup: yes
          ignore_errors: yes

        - name: Source the .zshrc file
          command: zsh -lc "source {{ zshrc_path }}"
          register: source_zshrc_file_output
          ignore_errors: yes

        - name: Download p10k settings file
          get_url:
            url: https://raw.githubusercontent.com/pastelnetwork/ansible_playbook_for_initial_setup_of_fresh_machine_for_sn/master/p10k.zsh
            dest: "{{ home_dir }}/.p10k.zsh"
            owner: "{{ created_username }}"
            group: "{{ created_username }}"
            mode: '0644'
          ignore_errors: yes

        - name: Clone pyenv repository
          git:
            repo: 'https://github.com/pyenv/pyenv.git'
            dest: '{{ home_dir }}/.pyenv'
            update: yes
            force: yes
          ignore_errors: yes

        - name: Ensure pyenv environment variables are set in .zshrc
          blockinfile:
            path: '{{ zshrc_path }}'
            block: |
              export PYENV_ROOT="$HOME/.pyenv"
              export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init --path)"
          ignore_errors: yes

        - name: Ensure pyenv environment variables are set in .bashrc
          blockinfile:
            path: '{{ home_dir }}/.bashrc'
            block: |
              export PYENV_ROOT="$HOME/.pyenv"
              export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init --path)"
          ignore_errors: yes

        - name: Ensure pyenv is initialized in zsh
          shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            pyenv --version
          args:
            executable: /bin/zsh
          register: pyenv_version_zsh
          changed_when: "'pyenv' not in pyenv_version_zsh.stdout"
          ignore_errors: yes

        - name: Ensure pyenv is initialized in bash
          shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin/$PATH"
            eval "$(pyenv init --path)"
            pyenv --version
          args:
            executable: /bin/bash
          register: pyenv_version_bash
          changed_when: "'pyenv' not in pyenv_version_bash.stdout"
          ignore_errors: yes

        - name: Install Python 3.12 using pyenv in zsh
          shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            pyenv install -s 3.12
          args:
            executable: /bin/zsh
          ignore_errors: yes

        - name: Install Python 3.12 using pyenv in bash
          shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin/$PATH"
            eval "$(pyenv init --path)"
            pyenv install -s 3.12
          args:
            executable: /bin/bash
          ignore_errors: yes

        - name: Ensure curl is installed
          package:
            name: curl
            state: present
          ignore_errors: yes

        - name: Download and install NVM
          shell: |
            export NVM_DIR="$HOME/.nvm"
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          args:
            creates: "{{ home_dir }}/.nvm/nvm.sh"
          register: nvm_install
          ignore_errors: yes

        - name: Check if NVM script exists
          stat:
            path: "{{ home_dir }}/.nvm/nvm.sh"
          register: nvm_check
          ignore_errors: yes

        - name: Ensure Node.js is available in future bash sessions
          lineinfile:
            path: "{{ home_dir }}/.bashrc"
            line: 'export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh"'
            state: present
          ignore_errors: yes

        - name: Ensure Node.js is available in future zsh sessions
          lineinfile:
            path: "{{ home_dir }}/.zshrc"
            line: 'export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh"'
            state: present
          ignore_errors: yes

        - name: Source NVM script and install latest Node.js version
          shell: |
            . {{ home_dir }}/.nvm/nvm.sh
            nvm install --latest-npm
            nvm use node
            nvm alias default node
          args:
            executable: /bin/bash
          when: nvm_check.stat.exists
          ignore_errors: yes

        - name: Source NVM in .profile for login shells
          lineinfile:
            path: "{{ home_dir }}/.profile"
            line: 'export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh"'
            state: present
          ignore_errors: yes
